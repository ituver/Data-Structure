#include<stdio.h>
#include<stdlib.h>

//定义结构体类型保存多项式的系数和指针 
typedef struct PolyNode *Polynomial;
struct PolyNode{
	int cofe;
	int expon;
	Polynomial link;
};

Polynomial ReadPoly();//读入多项式
void Attach(int,int,Polynomial *pRear);
Polynomial Add(Polynomial P1,Polynomial P2); //两个多项式相加
Polynomial Mult(Polynomial P1,Polynomial P2);//两个多项式相乘
void PrintPoly(Polynomial P);//多项式输出

int main()
{
	
	Polynomial P1,P2,PP,PS;
	
	P1=ReadPoly();//读入多项式1 
	P2=ReadPoly();//读入多项式2 
	PP=Mult(P1,P2);//乘法运算 
	PrintPoly(PP); //输出 
	PS=Add(P1,P2);//加法运算 
	PrintPoly(PS);//输出 
	
	return 0;
}

//读入多项式 
Polynomial ReadPoly()
{
	Polynomial P,Rear,t;
	int c,e,N;
	 
	scanf("%d",&N);
	P=(Polynomial)malloc(sizeof(struct PolyNode));
	P->link = NULL;//链表头空结点 
	Rear = P;
	while(N--){
		scanf("%d%d",&c,&e);
		Attach(c,e,&Rear);//将当前项插入多项式尾部 
	}
	t = P; P=P->link; free(t);//删除临时生成的头结点 
	return P;
}
 
void Attach(int c,int e,Polynomial *pRear)
{
	Polynomial P;
	
	P=(Polynomial)malloc(sizeof(struct PolyNode));
	P->cofe = c;//对新结点赋值 
	P->expon = e;
	P->link = NULL;
	(*pRear)->link = P;
	*pRear = P;//修改pRear值 
}

//两个多项式相加
Polynomial Add(Polynomial P1,Polynomial P2)
{
	Polynomial front,rear,temp;
	int sum;
	
//	t1=P1;t2=P2;
	rear=(Polynomial)malloc(sizeof(struct PolyNode));
	//P->link = NULL;
	//Rear = P;
	front = rear;//由front记录结果多项式链表头结点 
	while(P1 && P2){		//当两个多项式都有非零项待处理时，比较指数大小 
		if(P1->expon == P2->expon){
			sum = P1->cofe + P2->cofe;
			if(sum)	Attach(sum,P1->expon,&rear);
			P1 = P1->link;
			P2 = P2->link;
		}
		else if(P1->expon > P2->expon){
			Attach(P1->cofe,P1->expon,&rear);
			P1 = P1->link;
		}
		else{
			Attach(P2->cofe,P2->expon,&rear);
			P2 = P2->link; 
		}
	} 
	//将未处理完的另一个多项式的所有结点依次复制到结果多项式中去 
/*	while(t1){
		
	}*/
	for(;P1;P1 = P1->link)	Attach(P1->cofe,P1->expon,&rear); 
/*	while(t2){
		
	}*/
	for(;P2;P2 = P2->link)	Attach(P2->cofe,P2->expon,&rear);
	rear->link = NULL;
	temp = front;
	front = front->link;
	free(temp);
	
	return front;
 } 
 
 //两个多项式相乘
 //1.将乘法运算转换为加法运算。2.逐项插入，将P1当前项乘P2当前项，并插入到结果多项式中
Polynomial Mult(Polynomial P1,Polynomial P2)
{
	Polynomial P,Rear,t1,t2,t;
	int c,e;
	
	if(!P1 || !P2)	return NULL;
	
	t1 = P1;t2 = P2;
	P = (Polynomial)malloc(sizeof(struct PolyNode));
	P->link = NULL;
	Rear = P;
	while(t2){		//先用P1的第1项乘以P2，得到P 
		Attach(t1->cofe*t2->cofe,t1->expon + t2->expon,&Rear);
		t2 = t2->link;
	}
	t1 = t1->link;
	while(t1){
		t2 = P2; Rear = P;
		while(t2){
			e = t1->expon + t2->expon;
			c = t1->cofe * t2->cofe;
			while(Rear->link && Rear->link->expon > e){
				Rear = Rear->link;
			}
			if(Rear->link && Rear->link->expon == e){
				if(Rear->link->cofe + c)
					Rear->link->cofe += c;
				else{
					t = Rear->link;
					Rear->link = t->link;
					free(t);
				}
			}
			else{
				t = (Polynomial)malloc(sizeof(struct PolyNode));
				t->cofe = c;
				t->expon = e;
				t->link = Rear->link;
				Rear->link = t;
				Rear = Rear->link;
			}
			t2 = t2->link;
		}
		t1 = t1->link;
	} 
	t2 = P; P = P ->link; free(t2);
	
	return P; 
} 

//多项式输出
void PrintPoly(Polynomial P)
{
	int flag = 0;	//辅助调整输出格式
	
	if(!P){
		printf("0 0\n");
		return;
	}
	while(P){
		if(!flag)
			flag = 1;
		else
			printf(" ");
		printf("%d %d",P->cofe,P->expon);
		P = P->link;
	}
	printf("\n");
} 
